const fonts = [
  // Fuente 0: Cuadrada
  {
    a: 'üÑ∞', b: 'üÑ±', c: 'üÑ≤', d: 'üÑ≥', e: 'üÑ¥', f: 'üÑµ', g: 'üÑ∂',
    h: 'üÑ∑', i: 'üÑ∏', j: 'üÑπ', k: 'üÑ∫', l: 'üÑª', m: 'üÑº', n: 'üÑΩ',
    o: 'üÑæ', p: 'üÑø', q: 'üÖÄ', r: 'üÖÅ', s: 'üÖÇ', t: 'üÖÉ', u: 'üÖÑ',
    v: 'üÖÖ', w: 'üÖÜ', x: 'üÖá', y: 'üÖà', z: 'üÖâ'
  },
  // Fuente 1: Letras negras (dobles)
  {
    a: 'üÖê', b: 'üÖë', c: 'üÖí', d: 'üÖì', e: 'üÖî', f: 'üÖï', g: 'üÖñ',
    h: 'üÖó', i: 'üÖò', j: 'üÖô', k: 'üÖö', l: 'üÖõ', m: 'üÖú', n: 'üÖù',
    o: 'üÖû', p: 'üÖü', q: 'üÖ†', r: 'üÖ°', s: 'üÖ¢', t: 'üÖ£', u: 'üÖ§',
    v: 'üÖ•', w: 'üÖ¶', x: 'üÖß', y: 'üÖ®', z: 'üÖ©'
  }
  // Puedes seguir agregando m√°s estilos si quieres
]

const handler = async (m, { conn, text }) => {
  if (!text.includes(',')) {
    return m.reply(`Formato incorrecto.\nEjemplo:\n.reactch <link>,<texto>,<n√∫mero de fuente>\n\nFuentes disponibles:\n0: Cuadrada\n1: Negras`)
  }

  const parts = text.split(',').map(v => v.trim())
  if (parts.length < 2) return m.reply("Faltan argumentos. Aseg√∫rate de usar: link,texto[,fuente]")

  const link = parts[0]
  const msg = parts[1].toLowerCase()
  const fontIndex = parseInt(parts[2] || 0)

  if (!link.startsWith("https://whatsapp.com/channel/")) {
    return m.reply("‚ùå Link no v√°lido")
  }

  if (isNaN(fontIndex) || fontIndex >= fonts.length || fontIndex < 0) {
    return m.reply("‚ùå Fuente inv√°lida. Usa un n√∫mero entre 0 y " + (fonts.length - 1))
  }

  const font = fonts[fontIndex]
  const emoji = msg.split('').map(c => c === ' ' ? '‚Äï' : (font[c] || c)).join('')

  try {
    const [, , , , channelId, messageId] = link.split('/')
    const res = await conn.newsletterMetadata("invite", channelId)
    await conn.newsletterReactMessage(res.id, messageId, emoji)
    m.reply(`‚úÖ Reacci√≥n *${emoji}* enviada a *${res.name}* usando fuente ${fontIndex}.`)
  } catch (e) {
    console.error(e)
    m.reply("‚ùå Error al enviar la reacci√≥n.")
  }
}

handler.command = ['reactch', 'rch']
handler.tags = ['tools']
handler.help = ['reactch <link>,<texto>,<n√∫mero de fuente>']
handler.owner = true

export default handler